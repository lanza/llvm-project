// RUN: gatorade %s -o - -cir-cross-library-import | FileCheck %s

!s32i = !cir.int<s, 32>
module {
  cir.library @a {
    // Import this
    cir.func no_proto private @funcB(...) -> !s32i
    // Don't import these two since they are used in parent module
    cir.func no_proto private @funcB2(...) -> !s32i
    cir.func no_proto private @funcB4(...) -> !s32i
    cir.func no_proto @funcA() -> !s32i {
      %0 = cir.call @funcB() : () -> !s32i
      %1 = cir.call @funcB2() : () -> !s32i
      %2 = cir.call @funcB4() : () -> !s32i
      %3 = cir.binop(add, %0, %1) : !s32i
      %4 = cir.binop(add, %3, %2) : !s32i
      cir.return %4 : !s32i
    }
  }
  cir.library @b {
    cir.func no_proto @funcB() -> !s32i {
      %0 = cir.const(#cir.int<5> : !s32i) : !s32i
      cir.return %0 : !s32i
    }
    cir.func no_proto @funcB2() -> !s32i {
      %0 = cir.const(#cir.int<5> : !s32i) : !s32i
      cir.return %0 : !s32i
    }
    cir.func no_proto @funcB3() -> !s32i {
      %0 = cir.call @funcB2() : () -> !s32i
      cir.return %0 : !s32i
    }
    cir.func no_proto @funcB4() -> !s32i {
      %0 = cir.call @funcB2() : () -> !s32i
      cir.return %0 : !s32i
    }
  }
  cir.library @c {
    // Don't import definition here since it's dead
    cir.func no_proto private @funcB(...) -> !s32i
  }
}

//      CHECK: !s32i = !cir.int<s, 32>
// CHECK-NEXT: module {
// CHECK-NEXT:   cir.library @a {
// CHECK-NEXT:     cir.func no_proto cir_private @funcB() -> !s32i {
// CHECK-NEXT:       %0 = cir.const(#cir.int<5> : !s32i) : !s32i
// CHECK-NEXT:       cir.return %0 : !s32i
// CHECK-NEXT:     }
// CHECK-NEXT:     cir.func no_proto private @funcB2(...) -> !s32i
// CHECK-NEXT:     cir.func no_proto private @funcB4(...) -> !s32i
// CHECK-NEXT:     cir.func no_proto cir_private @funcA() -> !s32i {
// CHECK-NEXT:       %0 = cir.call @funcB() : () -> !s32i
// CHECK-NEXT:       %1 = cir.call @funcB2() : () -> !s32i
// CHECK-NEXT:       %2 = cir.call @funcB4() : () -> !s32i
// CHECK-NEXT:       %3 = cir.binop(add, %0, %1) : !s32i
// CHECK-NEXT:       %4 = cir.binop(add, %3, %2) : !s32i
// CHECK-NEXT:       cir.return %4 : !s32i
// CHECK-NEXT:     }
// CHECK-NEXT:   }
// CHECK-NEXT:   cir.library @b {
// CHECK-NEXT:     cir.func no_proto cir_private @funcB() -> !s32i {
// CHECK-NEXT:       %0 = cir.const(#cir.int<5> : !s32i) : !s32i
// CHECK-NEXT:       cir.return %0 : !s32i
// CHECK-NEXT:     }
// CHECK-NEXT:     cir.func no_proto @funcB2() -> !s32i {
// CHECK-NEXT:       %0 = cir.const(#cir.int<5> : !s32i) : !s32i
// CHECK-NEXT:       cir.return %0 : !s32i
// CHECK-NEXT:     }
// CHECK-NEXT:     cir.func no_proto cir_private @funcB3() -> !s32i {
// CHECK-NEXT:       %0 = cir.call @funcB2() : () -> !s32i
// CHECK-NEXT:       cir.return %0 : !s32i
// CHECK-NEXT:     }
// CHECK-NEXT:     cir.func no_proto @funcB4() -> !s32i {
// CHECK-NEXT:       %0 = cir.call @funcB2() : () -> !s32i
// CHECK-NEXT:       cir.return %0 : !s32i
// CHECK-NEXT:     }
// CHECK-NEXT:   }
// CHECK-NEXT:   cir.library @c {
// CHECK-NEXT:     cir.func no_proto private @funcB(...) -> !s32i
// CHECK-NEXT:   }
// CHECK-NEXT: }
